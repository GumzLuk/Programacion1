unit UCLFigura;

interface
 uses Graphics,   UCLMuro;

 const
    distancia = 32;
  Type
    TFigura = Class
      private
         widthFigura,heigthFigura : Word;
         direccionMov : Word;
         x,y : Word;
         skin : TBitmap;
     public
         constructor createFigura(xi,yi:Word);
         procedure cargarImagen(rutaImagen:String);
         procedure dibujar(pantalla:TCanvas);
         procedure SetX(xi:Word);
         procedure SetY(yi:Word);
         procedure CambiarPosicion(x,y:Word);
         procedure SetDireccionMov(direc:Word);
         function ObtDireccionMov():Word;
         function ObtX():Word;
         function ObtY():Word;
         function ObtAnchoFigura():Word;
         function ObtAlturaFigura():Word;
         function choqueMuroDerecha(Muros:TMuro):boolean;
         function choqueMuroIzquierda(Muros:TMuro):boolean;
         function choqueMuroArriba(Muros:TMuro):boolean;
         function choqueMuroAbajo(Muros:TMuro):boolean;
    //     function choqueCajas(Cajas:TCaja):boolean;
    End;

implementation

{ TFigura }

constructor TFigura.createFigura(xi, yi: Word);
begin
 Self.x := xi;
 Self.y := yi;
end;

procedure TFigura.cargarImagen(rutaImagen: String);
begin
 skin := TBitmap.Create;
 skin.LoadFromFile(rutaImagen);
 widthFigura := skin.Width;
 heigthFigura := skin.Height;
 {transparencia}
 skin.Transparent := true;
 skin.TransparentColor := skin.Canvas.Pixels[1,1];
end;

procedure TFigura.dibujar(pantalla:TCanvas);
begin
 pantalla.Draw(x,y,skin);
end;

procedure TFigura.CambiarPosicion(x, y: Word);
begin
 Self.x := x;
 Self.y := y;
end;

procedure TFigura.SetDireccionMov(direc: Word);
begin
 self.direccionMov := direc;
end;

procedure TFigura.SetX(xi: Word);
begin
 self.x := xi;
end;

procedure TFigura.SetY(yi: Word);
begin
 Self.y := yi;
end;

function TFigura.ObtX: Word;
begin
 Result := x;
end;

function TFigura.ObtY: Word;
begin
 Result := y;
end;

function TFigura.ObtAlturaFigura: Word;
begin
 Result := (y + heigthFigura);
end;

function TFigura.ObtAnchoFigura: Word;
begin
 Result := (x + widthFigura);
end;


function TFigura.choqueMuroAbajo(Muros:TMuro): boolean;
 var
   i,posSiguiente : Word;
   choqM : boolean;
begin
 choqM := false;
 posSiguiente := y + distancia;
 i := 1;
   while(i <= Muros.getDimension)AND not(choqM)do
    begin
      if(Self.x = Muros.ObtXPosElement(i))AND(posSiguiente = Muros.ObtYPosElement(i))then
         choqM := true;
      i := i + 1;
    end;
 Result := choqM;
end;

function TFigura.choqueMuroArriba(Muros:TMuro): boolean;
 var
   i,posSiguiente : Word;
   choqM : boolean;
begin
 posSiguiente := y - distancia;
 choqM := false;
 i := 1;
   while(i <= Muros.getDimension)AND not(choqM)do
    begin
      if(Self.x = Muros.ObtXPosElement(i))AND(posSiguiente = Muros.ObtYPosElement(i))then
         choqM := true;
      i := i + 1;
    end;
 Result := choqM;
end;

function TFigura.choqueMuroDerecha(Muros:TMuro): boolean;
 var
   i,posSiguiente : Word;
   choqM : boolean;
begin
 choqM := false;
 posSiguiente := x + distancia;
 i := 1;
   while(i <= Muros.getDimension)AND not(choqM)do
    begin
      if(Self.y = Muros.ObtYPosElement(i))AND(posSiguiente = Muros.ObtXPosElement(i))then
         choqM := true;
      i := i + 1;
    end;
 Result := choqM;
end;

function TFigura.choqueMuroIzquierda(Muros:TMuro): boolean;
 var
   i,posSiguiente: Word;
   choqM : boolean;
begin
 choqM := false;
 i := 1;
 posSiguiente := x - distancia;
   while(i <= Muros.getDimension)AND not(choqM)do
    begin
      if(Self.y = Muros.ObtYPosElement(i))AND(posSiguiente = Muros.ObtXPosElement(i))then
         choqM := true;
      i := i + 1;
    end;
 Result := choqM;
end;

function TFigura.ObtDireccionMov(): Word;
begin
 Result := direccionMov;
end;

function TFigura.choqueCajas(Cajas: TCaja): boolean;
 var
   i,posSiguiente : Word;
   choqM : boolean;
begin
 choqM := false;
 posSiguiente := x + distancia;
 i := 1;
   while(i <= Cajas.getDimension)AND not(choqM)do
    begin
      if(Self.y = Muros.ObtYPosElement(i))AND(posSiguiente = Muros.ObtXPosElement(i))then
         choqM := true;
      i := i + 1;
    end;
 Result := choqM;
end;
end.
